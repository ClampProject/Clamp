import javascriptGenerator from '../javascriptGenerator';
import ProjectState from '../state';

class Compiler {
    constructor(workspace) {
        this.workspace = workspace;

        this.characters = ProjectState.default.characters;
        this.images = ProjectState.default.images;
        this.sounds = ProjectState.default.sounds;
    }

    setCharacters(array) {
        this.characters = array;
    }
    setImages(array) {
        this.images = array;
    }
    setSounds(array) {
        this.sounds = array;
    }

    /**
     * Generates code from the workspace and any set images and sounds.
     */
    compile() {
        const genCode = [javascriptGenerator.workspaceToCode(this.workspace)];
        const headerCode = [
            `/* THIS CODE WAS GENERATED BY CLAMP / BLOCKLY. IT IS NOT INTENDED TO BE READ BY HUMANS IN ITS FULL FORM. */`,
            `// Comments may still appear as they are useful internally.`,
            `console.log("Initializing Project, please wait...");`,
            `const INITIALIZE_BEGIN = Date.now(); // it may be useful in development to see how long it took to initialize`,
            `const variables = {}; // all variables are stored here instead of a "const variable = 123" for each set block`,
            `// this is so we dont end up with a Scratch for Discord where setting a variable with the name "message" breaks everything`,
            `// im allowed to say that because i worked on S4D lolol`,
            `(async function() {`
        ];
        const setupCode = [
            `const characters = {}; // object so we can use invalid characters for character names and still easily access them`,
            `const images = {};`,
            `const sounds = {};`
        ];
        const descriptorCode = [
            `const nameTable = {characters:{},images:{},sounds:{}}; // contains the ID: Name for each type`
        ];
        const footerCode = [
            `})();`
        ];

        // initialize images
        this.images.forEach(image => {
            const variableName = JSON.stringify(image.id);
            const variableUserName = JSON.stringify(image.name);
            const variableImage = JSON.stringify(image.image);

            setupCode.push(`images[${variableName}] = await Kaboom.loadSprite(${variableName}, ${variableImage});`);
            descriptorCode.push(`nameTable.images[${variableName}] = String(${variableUserName});`);
        });
        // initialize sounds
        this.sounds.forEach(sound => {
            const variableName = JSON.stringify(sound.id);
            const variableUserName = JSON.stringify(sound.name);
            const variableData = JSON.stringify(sound.data);

            setupCode.push(`sounds[${variableName}] = await Kaboom.loadSound(${variableName}, ${variableData});`);
            descriptorCode.push(`nameTable.sounds[${variableName}] = String(${variableUserName});`);
        });
        // initialize character code
        this.characters.forEach(character => {
            // we need to clean all of these names to ensure they dont generate invalid code
            // so we use things like Number() and JSON.stringify() everywhere
            const variableName = JSON.stringify(character.id);
            const variableUserName = JSON.stringify(character.name);

            const characterData = {
                defaultLook: JSON.stringify(character.startCostume),
                x: isNaN(Number(character.position.x)) ? 0 : Number(character.position.x),
                y: isNaN(Number(character.position.y)) ? 0 : Number(character.position.y),
                size: isNaN(Number(character.size)) ? 0 : Number(character.size),
                angle: isNaN(Number(character.angle)) ? 0 : Number(character.angle),
            };
            setupCode.push(`characters[${variableName}] = Kaboom.add([
                Kaboom.sprite(${characterData.defaultLook}),
                Kaboom.pos(${characterData.x}, ${characterData.y}),
                Kaboom.scale(${characterData.size}),
                Kaboom.rotate(${characterData.angle}),
            ]);`);
            descriptorCode.push(`nameTable.characters[${variableName}] = String(${variableUserName});`);
        });

        return [].concat(headerCode, descriptorCode, setupCode, [
            // extra stuff that is always the same
            '/* extra events & setup */',
            'console.log("Content Loaded in", (Date.now() - INITIALIZE_BEGIN), "millseconds");',
            'ClampEditor.initializingCode = false; // tell clamp we are finished initializing the project and we can start running the user code',
            'Engine.emitGlobal("CODE_INITIALIZE_UPDATE"); // read above comment for details; this event is for svelte to update since it cant tell the state changed',
            '// technically thats a Svelte problem that i could report but its such a specific use-case that i dont think its worth fixing',
            '/* ok enough baby stuff LETS RUN SOME CODE */',
        ], genCode, footerCode).join('\n');
    }
}

export default Compiler;